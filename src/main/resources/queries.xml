<?xml version="1.0" encoding="UTF-8"?>
<root>
	<entry name="sssPhilHealthReport">
	<![CDATA[
SELECT 
	CONCAT(d.lastName, ', ', d.firstName) AS employeeFullName, 
	d.nickname AS employeeNickname,
	IFNULL(sssEmployeeContribution, 0) AS sssEmployeeContribution, 
	IFNULL(sssEmployerContribution, 0) AS sssEmployerContribution,
	c.monthlyPay,
	IFNULL(pagibigContribution, 0) AS pagibigContribution,
	d.sssNumber,
	d.philHealthNumber
FROM (
	SELECT a.id AS employeeId, MAX(-d.amount) as sssEmployeeContribution, MAX(e.employerContribution) AS sssEmployerContribution
	FROM employee a
	JOIN payslip b
	  ON b.employee_id = a.id
	JOIN payroll c
	  ON c.id = b.payroll_id
	LEFT JOIN payslipAdjustment d
	  ON d.payslip_id = b.id
	  AND d.type = 'SSS'
	LEFT JOIN sssContributionTableEntry e
	  on e.employeeContribution = -d.amount
	WHERE a.resigned = false
	AND d.contributionMonth = :contributionMonth
	GROUP BY a.ID
) a
LEFT JOIN (
	SELECT a.id AS employeeId, MAX(-d.amount) AS pagibigContribution
	FROM employee a
	JOIN payslip b
	  ON b.employee_id = a.id
	JOIN payroll c
	  ON c.id = b.payroll_id
	LEFT JOIN payslipAdjustment d
	  ON d.payslip_id = b.id
	  AND d.type = 'PAGIBIG'
	WHERE a.resigned = false
	AND d.contributionMonth = :contributionMonth
	GROUP BY a.ID
) b
	ON b.employeeId = a.employeeId
JOIN (
	SELECT id AS employeeId, IFNULL(SUM(
		(CASE payType 
			WHEN 'PER_DAY' THEN rate
			WHEN 'FIXED_RATE' THEN
				(CASE paySchedule
					WHEN 'WEEKLY' THEN rate / 6
					WHEN 'SEMIMONTHLY' THEN rate / (CASE WHEN date < DATE_ADD(:firstDayOfMonth, INTERVAL 15 DAY) THEN :numberOfWorkingDaysInFirstHalf ELSE :numberOfWorkingDaysInSecondHalf END)
				END)
		END)
	), 0) AS monthlyPay
	FROM (
		SELECT a.id, b.date, c.payType, c.paySchedule, c.rate * (CASE d.attendance WHEN 'WHOLE_DAY' THEN 1 WHEN 'HALF_DAY' THEN 0.5 ELSE 0 END) AS rate
		FROM employee a
		JOIN calendar b
			ON b.date BETWEEN :firstDayOfMonth and DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH)
		JOIN salary c
			ON b.date >= c.effectiveDateFrom
			AND (b.date <= c.effectiveDateTo OR c.effectiveDateTo IS NULL)
			AND c.employee_id = a.id
		JOIN employeeAttendance d
			ON d.employee_id = a.id
			AND d.date = b.date
		WHERE a.resigned = false
	) z
) c
	ON c.employeeId = a.employeeId
JOIN employee d
	ON d.id = a.employeeId
ORDER BY d.firstName, d.lastName
	]]>
	</entry>
	<entry name="latesReport">
		SELECT emp.nickname AS employeeNickname, subquery.lates
		FROM employee emp
		JOIN (
			SELECT b.employee_id, -SUM(a.amount) AS lates
			FROM payslipAdjustment a
			JOIN payslip b
			  ON b.id = a.payslip_id
			JOIN payroll c
			  ON c.id = b.payroll_id
			WHERE a.type = 'LATES'
			AND c.payDate BETWEEN :dateFrom AND :dateTo
			GROUP BY b.employee_id
		) subquery
			ON subquery.employee_id = emp.id
		ORDER BY lates DESC
	</entry>
	<entry name="monthlyPay">
<![CDATA[
SELECT IFNULL(SUM(
	(CASE payType 
		WHEN 'PER_DAY' THEN rate
		WHEN 'FIXED_RATE' THEN
			(CASE paySchedule
				WHEN 'WEEKLY' THEN rate / 6
				WHEN 'SEMIMONTHLY' THEN originalRate / (CASE WHEN date < DATE_ADD(:firstDayOfMonth, INTERVAL 15 DAY) THEN :numberOfWorkingDaysInFirstHalf ELSE :numberOfWorkingDaysInSecondHalf END)
			END)
	END)
), 0) AS monthlyPay
FROM (
	SELECT b.date, c.payType, c.paySchedule, c.rate * (CASE d.attendance WHEN 'WHOLE_DAY' THEN 1 WHEN 'HALF_DAY' THEN 0.5 ELSE 0 END) AS rate,
		c.rate AS originalRate
	FROM employee a
	JOIN calendar b
		ON b.date BETWEEN :firstDayOfMonth and DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH)
	JOIN salary c
		ON b.date >= c.effectiveDateFrom
		AND (b.date <= c.effectiveDateTo OR c.effectiveDateTo IS NULL)
		AND c.employee_id = a.id
	JOIN employeeAttendance d
		ON d.employee_id = a.id
		AND d.date = b.date
	WHERE a.id = :employeeId
) z
	]]>
	</entry>
	<entry name="monthlyPay2">
<![CDATA[
SELECT IFNULL(SUM(
	(CASE payType 
		WHEN 'PER_DAY' THEN rate
		WHEN 'FIXED_RATE' THEN
			(CASE paySchedule
				WHEN 'WEEKLY' THEN rate / 6
				WHEN 'SEMIMONTHLY' THEN rate / (CASE WHEN date < DATE_ADD(:firstDayOfMonth, INTERVAL 15 DAY) THEN :numberOfWorkingDaysInFirstHalf ELSE :numberOfWorkingDaysInSecondHalf END)
			END)
	END)
), 0) AS monthlyPay
FROM (
	SELECT b.date, c.payType, c.paySchedule, c.rate * (CASE d.attendance WHEN 'WHOLE_DAY' THEN 1 WHEN 'HALF_DAY' THEN 0.5 ELSE 0 END) AS rate
	FROM employee a
	JOIN calendar b
		ON b.date BETWEEN :firstDayOfMonth and DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH)
	JOIN salary c
		ON b.date >= c.effectiveDateFrom
		AND (b.date <= c.effectiveDateTo OR c.effectiveDateTo IS NULL)
		AND c.employee_id = a.id
	JOIN employeeAttendance d
		ON d.employee_id = a.id
		AND d.date = b.date
	WHERE a.id = :employeeId
) z
	]]>
	</entry>
	<entry name="householdMonthlyPay">
<![CDATA[
SELECT IFNULL(SUM(rate / :numberOfWorkingDays), 0) AS monthlyPay
FROM (
	SELECT b.date, c.payType, c.paySchedule, c.rate * (CASE d.attendance WHEN 'WHOLE_DAY' THEN 1 WHEN 'HALF_DAY' THEN 0.5 ELSE 0 END) AS rate,
		c.rate AS originalRate
	FROM employee a
	JOIN calendar b
		ON b.date BETWEEN :firstDayOfMonth and DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH)
	JOIN salary c
		ON b.date >= c.effectiveDateFrom
		AND (b.date <= c.effectiveDateTo OR c.effectiveDateTo IS NULL)
		AND c.employee_id = a.id
	JOIN employeeAttendance d
		ON d.employee_id = a.id
		AND d.date = b.date
	WHERE a.id = :employeeId
) z
	]]>
	</entry>
	<entry name="sssNonHouseholdReport">
	<![CDATA[
SELECT 
	CONCAT(d.lastName, ', ', d.firstName) AS employeeName,
	d.sssNumber,
	IFNULL(c.monthlyPay, 0) AS monthlyPay,
	IFNULL(a.employeeContribution, 0) AS employeeContribution,
	IFNULL(a.employerContribution, 0) AS employerContribution,
	IFNULL(a.employeeCompensation, 0) AS employeeCompensation
FROM employee d
LEFT JOIN (
	SELECT a.id AS employeeId, MAX(-d.amount) as employeeContribution, MAX(e.employerContribution) AS employerContribution,
		MAX(e.employeeCompensation) as employeeCompensation
	FROM employee a
	JOIN payslip b
	  ON b.employee_id = a.id
	JOIN payroll c
	  ON c.id = b.payroll_id
	LEFT JOIN payslipAdjustment d
	  ON d.payslip_id = b.id
	  AND d.type = 'SSS'
	LEFT JOIN sssContributionTableEntry e
	  on e.employeeContribution = -d.amount
	WHERE a.household = false
	AND (a.resignDate is null OR a.resignDate >= DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH))
	AND d.contributionMonth = :contributionMonth
	GROUP BY a.ID
) a
	ON a.employeeId = d.id	
LEFT JOIN (
	SELECT id AS employeeId, IFNULL(SUM(
		(CASE payType 
			WHEN 'PER_DAY' THEN rate
			WHEN 'FIXED_RATE' THEN
				(CASE paySchedule
					WHEN 'WEEKLY' THEN rate / 6
					WHEN 'SEMIMONTHLY' THEN rate / (CASE WHEN date < DATE_ADD(:firstDayOfMonth, INTERVAL 15 DAY) THEN :numberOfWorkingDaysInFirstHalf ELSE :numberOfWorkingDaysInSecondHalf END)
				END)
		END)
	), 0) AS monthlyPay
	FROM (
		SELECT a.id, b.date, c.payType, c.paySchedule, c.rate * (CASE d.attendance WHEN 'WHOLE_DAY' THEN 1 WHEN 'HALF_DAY' THEN 0.5 ELSE 0 END) AS rate
		FROM employee a
		JOIN calendar b
			ON b.date >= :firstDayOfMonth
			and b.date < DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH)
		JOIN salary c
			ON b.date >= c.effectiveDateFrom
			AND (b.date <= c.effectiveDateTo OR c.effectiveDateTo IS NULL)
			AND c.employee_id = a.id
		JOIN employeeAttendance d
			ON d.employee_id = a.id
			AND d.date = b.date
		WHERE a.household = false
		AND (a.resignDate is null OR a.resignDate >= DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH))
	) z
	GROUP BY id
) c
	ON c.employeeId = d.id
WHERE d.household = false
AND (d.resignDate is null OR d.resignDate >= DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH))
ORDER BY d.lastName, d.firstName
	]]>
	</entry>
	<entry name="sssHouseholdReport">
	<![CDATA[
SELECT 
	CONCAT(d.lastName, ', ', d.firstName) AS employeeName,
	d.sssNumber,
	IFNULL(c.monthlyPay, 0) AS monthlyPay,
	IFNULL(a.employeeContribution, 0) AS employeeContribution,
	IFNULL(a.employerContribution, 0) AS employerContribution,
	IFNULL(a.employeeCompensation, 0) AS employeeCompensation
FROM employee d
LEFT JOIN (
	SELECT a.id AS employeeId, MAX(-d.amount) as employeeContribution, MAX(e.employerContribution) AS employerContribution,
		MAX(e.employeeCompensation) as employeeCompensation
	FROM employee a
	JOIN payslip b
	  ON b.employee_id = a.id
	JOIN payroll c
	  ON c.id = b.payroll_id
	LEFT JOIN payslipAdjustment d
	  ON d.payslip_id = b.id
	  AND d.type = 'SSS'
	LEFT JOIN sssContributionTableEntry e
	  on e.employeeContribution = -d.amount
	WHERE a.household = true
	AND (a.resignDate is null OR a.resignDate >= DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH))
	AND d.contributionMonth = :contributionMonth
	GROUP BY a.ID
) a
	ON a.employeeId = d.id	
LEFT JOIN (
	SELECT id AS employeeId, IFNULL(SUM(rate / (CASE WHEN date < DATE_ADD(:firstDayOfMonth, INTERVAL 15 DAY) THEN 15 ELSE DAY(LAST_DAY(:firstDayOfMonth) - 15) END)), 0) AS monthlyPay
	FROM (
		SELECT a.id, b.date, c.rate * (CASE d.attendance WHEN 'WHOLE_DAY' THEN 1 WHEN 'HALF_DAY' THEN 0.5 ELSE 0 END) AS rate
		FROM employee a
		JOIN calendar b
			ON b.date BETWEEN :firstDayOfMonth and DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH)
		JOIN salary c
			ON b.date >= c.effectiveDateFrom
			AND (b.date <= c.effectiveDateTo OR c.effectiveDateTo IS NULL)
			AND c.employee_id = a.id
		JOIN employeeAttendance d
			ON d.employee_id = a.id
			AND d.date = b.date
		WHERE a.household = true
		AND (a.resignDate is null OR a.resignDate >= DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH))
	) z
) c
	ON c.employeeId = d.id
WHERE d.household = true
AND (d.resignDate is null OR d.resignDate >= DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH))
ORDER BY d.lastName, d.firstName
	]]>
	</entry>
	<entry name="philHealthNonHouseholdReport">
	<![CDATA[
SELECT 
	CONCAT(d.lastName, ', ', d.firstName) AS employeeName,
	d.philHealthNumber,
	IFNULL(c.monthlyPay, 0) AS monthlyPay,
	IFNULL(a.due, 0) AS due
FROM employee d
LEFT JOIN (
	SELECT a.id AS employeeId, MAX(-d.amount) as due
	FROM employee a
	JOIN payslip b
	  ON b.employee_id = a.id
	JOIN payroll c
	  ON c.id = b.payroll_id
	LEFT JOIN payslipAdjustment d
	  ON d.payslip_id = b.id
	  AND d.type = 'PHILHEALTH'
	WHERE a.household = false
	AND (a.resignDate is null OR a.resignDate >= DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH))
	AND d.contributionMonth = :contributionMonth
	GROUP BY a.ID
) a
	ON a.employeeId = d.id	
LEFT JOIN (
	SELECT id AS employeeId, IFNULL(SUM(
		(CASE payType 
			WHEN 'PER_DAY' THEN rate
			WHEN 'FIXED_RATE' THEN
				(CASE paySchedule
					WHEN 'WEEKLY' THEN rate / 6
					WHEN 'SEMIMONTHLY' THEN rate / (CASE WHEN date < DATE_ADD(:firstDayOfMonth, INTERVAL 15 DAY) THEN :numberOfWorkingDaysInFirstHalf ELSE :numberOfWorkingDaysInSecondHalf END)
				END)
		END)
	), 0) AS monthlyPay
	FROM (
		SELECT a.id, b.date, c.payType, c.paySchedule, c.rate * (CASE d.attendance WHEN 'WHOLE_DAY' THEN 1 WHEN 'HALF_DAY' THEN 0.5 ELSE 0 END) AS rate
		FROM employee a
		JOIN calendar b
			ON b.date >= :firstDayOfMonth
			and b.date < DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH)
		JOIN salary c
			ON b.date >= c.effectiveDateFrom
			AND (b.date <= c.effectiveDateTo OR c.effectiveDateTo IS NULL)
			AND c.employee_id = a.id
		JOIN employeeAttendance d
			ON d.employee_id = a.id
			AND d.date = b.date
		WHERE a.household = false
		AND (a.resignDate is null OR a.resignDate >= DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH))
	) z
	GROUP BY id
) c
	ON c.employeeId = d.id
WHERE d.household = false
AND (d.resignDate is null OR d.resignDate >= DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH))
ORDER BY d.lastName, d.firstName
	]]>
	</entry>
	<entry name="philHealthHouseholdReport">
	<![CDATA[
SELECT 
	CONCAT(d.lastName, ', ', d.firstName) AS employeeName,
	d.philHealthNumber,
	IFNULL(c.monthlyPay, 0) AS monthlyPay,
	IFNULL(a.due, 0) AS due
FROM employee d
LEFT JOIN (
	SELECT a.id AS employeeId, MAX(-d.amount) as due
	FROM employee a
	JOIN payslip b
	  ON b.employee_id = a.id
	JOIN payroll c
	  ON c.id = b.payroll_id
	LEFT JOIN payslipAdjustment d
	  ON d.payslip_id = b.id
	  AND d.type = 'PHILHEALTH'
	WHERE a.household = true
	AND (a.resignDate is null OR a.resignDate >= DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH))
	AND d.contributionMonth = :contributionMonth
	GROUP BY a.ID
) a
	ON a.employeeId = d.id	
LEFT JOIN (
	SELECT id AS employeeId, IFNULL(SUM(rate / (CASE WHEN date < DATE_ADD(:firstDayOfMonth, INTERVAL 15 DAY) THEN 15 ELSE DAY(LAST_DAY(:firstDayOfMonth) - 15) END)), 0) AS monthlyPay
	FROM (
		SELECT a.id, b.date, c.rate * (CASE d.attendance WHEN 'WHOLE_DAY' THEN 1 WHEN 'HALF_DAY' THEN 0.5 ELSE 0 END) AS rate
		FROM employee a
		JOIN calendar b
			ON b.date BETWEEN :firstDayOfMonth and DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH)
		JOIN salary c
			ON b.date >= c.effectiveDateFrom
			AND (b.date <= c.effectiveDateTo OR c.effectiveDateTo IS NULL)
			AND c.employee_id = a.id
		JOIN employeeAttendance d
			ON d.employee_id = a.id
			AND d.date = b.date
		WHERE a.household = true
		AND (a.resignDate is null OR a.resignDate >= DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH))
	) z
) c
	ON c.employeeId = d.id
WHERE d.household = true
AND (d.resignDate is null OR d.resignDate >= DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH))
ORDER BY d.lastName, d.firstName
	]]>
	</entry>
</root>